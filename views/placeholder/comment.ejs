<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <style>
      body {
        font-family: Arial, sans-serif;
      }

      table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
      }

      th,
      td {
        border: 1px solid #dddddd;
        padding: 8px;
        text-align: left;
      }

      th {
        background-color: #f2f2f2;
      }

      tr:nth-child(even) {
        background-color: #f2f2f2;
      }

      button {
        background-color: #4caf50;
        color: white;
        padding: 8px 12px;
        border: none;
        cursor: pointer;
        border-radius: 4px;
      }

      button:hover {
        background-color: #45a049;
      }

      .hidden {
        display: none;
      }
    </style>
  </head>
  <body>
    <script>
      async function fetchPost(postId) {
        const response = await fetch(
          `https://jsonplaceholder.typicode.com/posts/${postId}`
        );
        return response.json();
      }

      async function fetchComments(postId) {
        const response = await fetch(
          `https://jsonplaceholder.typicode.com/posts/${postId}/comments`
        );
        return response.json();
      }

      async function createTables() {
        const path = window.location.pathname;
        const postId = path.substring(path.lastIndexOf("/") + 1);

        const postData = await fetchPost(postId);

        const postTable = document.createElement("table");
        const postTbody = document.createElement("tbody");
        postTable.appendChild(postTbody);
        document.body.appendChild(postTable);

        //thead
        const keysPost = Object.keys(postData);
        const theadPost = document.createElement("thead");
        const trPost = document.createElement("tr");
        keysPost.forEach((key) => {
          const th = document.createElement("th");
          th.textContent = key;
          trPost.appendChild(th);
        });

        const tcom = document.createElement("th");
        const tcomtext = document.createTextNode("comments");
        tcom.appendChild(tcomtext);
        trPost.appendChild(tcom);

        theadPost.appendChild(trPost);
        postTable.appendChild(theadPost);

        //tbody
        const trdetails = document.createElement("tr");
        keysPost.forEach((key) => {
          const td = document.createElement("td");
          const text = document.createTextNode(postData[key]);
          td.appendChild(text);
          trdetails.appendChild(td);
        });

        const tdshowcomment = document.createElement("td");
        const showCommentsButton = document.createElement("button");
        showCommentsButton.textContent = "Comments";
        showCommentsButton.onclick = toggle;
        tdshowcomment.appendChild(showCommentsButton);
        trdetails.appendChild(tdshowcomment);

        postTbody.appendChild(trdetails);
      }

      async function toggle() {
        const path = window.location.pathname;
        const postId = path.substring(path.lastIndexOf("/") + 1);

        const commentsData = await fetchComments(postId);
        let commentsTable = document.getElementById("commentsTable");
        if (!commentsTable) {
          commentsTable = await createCommentTable(commentsData);
          document.body.appendChild(commentsTable);
        }

        commentsTable.classList.toggle("hidden");
      }

      async function createCommentTable(commentsData) {
        const commentTable = document.createElement("table");
        commentTable.id = "commentsTable";
        const commentTbody = document.createElement("tbody");
        commentTable.appendChild(commentTbody);

        // chead
        const commentheaderrow = document.createElement("tr");
        const commentKeys = Object.keys(commentsData[0]);
        commentKeys.forEach((key) => {
          const commentheader = document.createElement("th");
          commentheader.textContent = key;
          commentheaderrow.appendChild(commentheader);
        });
        commentTbody.appendChild(commentheaderrow);

        //cbody
        commentsData.forEach((comment) => {
          const commentRow = document.createElement("tr");
          commentKeys.forEach((key) => {
            const commentCell = document.createElement("td");
            const commentText = document.createTextNode(comment[key]);
            commentCell.appendChild(commentText);
            commentRow.appendChild(commentCell);
          });
          commentTbody.appendChild(commentRow);
        });

        commentTable.classList.add("hidden");
        return commentTable;
      }

      createTables();
    </script>
  </body>
</html>
